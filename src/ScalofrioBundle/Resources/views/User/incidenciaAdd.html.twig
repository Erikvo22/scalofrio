{% extends 'base.html.twig' %}

{% block body %}
    {{ include('menu.html.twig') }}
    {{ parent() }}

    <div class="main container">
        <div class="row well">
            <div class="col-md-6">
                <div class="page-header">
                    <h2><b><span class="glyphicon glyphicon-ok-circle"></span> Nueva incidencia</b></h2>
                </div>
                {{ form_start(form) }}

                <div class="form-group">
                    <label style="color: blue">Nº incidencia cliente</label> *Dejar vacío si no corresponde
                    {{ form_widget(form.numinccliente, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.numinccliente) }}</span>
                </div>
                <div class="form-group" style="width: 200px">
                    {{ form_label(form.fecha) }}
                    {{ form_widget(form.fecha) }}
                    <span class = "text-danger">{{ form_errors(form.fecha) }}</span>
                </div>
                <div class="form-group">
                    {{ form_label(form.comercial) }}
                    {{ form_widget(form.comercial, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.comercial) }}</span>
                </div>
                <div class="form-group">
                    {{ form_label(form.cliente) }}
                    {{ form_widget(form.cliente, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.cliente) }}</span>
                </div>
                <div class="form-group">
                    {{ form_label(form.establecimientos) }}
                    {{ form_widget(form.establecimientos, { 'attr' : {'class' : 'form-control'} }) }}
                    <span class = "text-danger">{{ form_errors(form.establecimientos) }}</span>
                </div>
                <div class="form-group">
                    <label>Bares</label>
                    {{ form_widget(form.subestablecimientos, { 'attr' : {'class' : 'form-control'} }) }}
                    <span class = "text-danger">{{ form_errors(form.subestablecimientos) }}</span>
                </div>
                <div class="form-group">
                    {{ form_label(form.ruta) }}
                    {{ form_widget(form.ruta, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.ruta) }}</span>
                </div>
                <div class="form-group">
                    <label>Nombre del cliente</label>
                    {{ form_widget(form.nombrecliente, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.nombrecliente) }}</span>
                </div>
                <div class="form-group">
                    <label>Cargo del cliente</label>
                    {{ form_widget(form.cargocliente, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.cargocliente) }}</span>
                </div>
                <div class="form-group">
                    {{ form_label(form.gestion) }}
                    {{ form_widget(form.gestion, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.gestion) }}</span>
                </div>
                <div class="form-group">
                    {{ form_label(form.resultado) }}
                    {{ form_widget(form.resultado, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.resultado) }}</span>
                </div>
                <div class="form-group" style="width: 100px">
                    <label>Tiempo (min.)</label>
                    {{ form_widget(form.tiempo, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.tiempo) }}</span>
                </div>
                <div class="form-group">
                    {{ form_label(form.maquinas) }}
                    {{ form_widget(form.maquinas, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.maquinas) }}</span>
                </div>
                <div class="form-group">
                    {{ form_label(form.repuestos) }}
                    {{ form_widget(form.repuestos, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.repuestos) }}</span>
                </div><br>

                    <label>Firma del cliente</label>
                    <div id="signature-pad" class="signature-pad">
                    <div class="signature-pad--body">
                        <canvas style="max-height:30em; max-width: 50em;"></canvas>
                    </div>
                    <div class="signature-pad--footer">
                        <div class="signature-pad--actions">
                            <div>
                                <button type="button" class="button clear" data-action="clear">Limpiar</button>
                                <button type="button" class="button save" data-action="save-png">Guardar</button>
                            </div>
                        </div>
                    </div>
                </div><br>
                <div class="form-group">
                    <label style="color: red;">Adjuntar firma</label>
                    {{ form_widget(form.firma) }}
                    <span class = "text-danger">{{ form_errors(form.firma) }}</span>
                </div><br>

                <div class="form-group">
                    {{ form_label(form.email) }} *Si el cliente tiene un email registrado, se le envía automáticamente.
                    {{ form_widget(form.email, { 'attr' : {'class' : 'form-control'}}) }}
                    <span class = "text-danger">{{ form_errors(form.email) }}</span>
                </div><br>

                <p>
                    {{ form_widget(form.guardar, {'label' : 'Crear incidencia', 'attr': {'class': 'btn btn-success'}}) }}
                </p>

                {{ form_end(form) }}
            </div>
        </div>
    </div>

{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        $(document).ready(function () {
            $('.js-datepicker').datepicker({
                format: 'yyyy-mm-dd'
            });

            //Autorellenado si se selecciona una incidencia en el primer select
            var nIncidencia = document.getElementById('incidencias_numinccliente');
            nIncidencia.addEventListener('change',
                function () {
                    var selectedOption = this.options[nIncidencia.selectedIndex];
                    seleccionIncidencia(selectedOption.value);
                });

            //Si el usuario es COMERCIAL, rellenamos el select de comercial.
            var comercial = '{{ comercial }}';
            if(comercial != null){
                $("#incidencias_comercial").val(comercial);
            }

            //Control selects cliente>establecimiento
            var select = document.getElementById('incidencias_cliente');
            $("#incidencias_establecimientos").prop("disabled", true);
            select.addEventListener('change',
                function () {
                    var selectedOption = this.options[select.selectedIndex];
                    CambioCliente(selectedOption.value);
                    $("#incidencias_establecimientos").prop("disabled", true);
                    $("#incidencias_establecimientos").empty();
                });

            //Control selects establecimiento>subestablecimiento
            var estab = document.getElementById('incidencias_establecimientos');
            $("#incidencias_subestablecimientos").prop("disabled", true);
            estab.addEventListener('change',
                function () {
                    var selectedOption = this.options[estab.selectedIndex];
                    CambioEstablecimiento(selectedOption.value);
                    $("#incidencias_subestablecimientos").prop("disabled", true);
                    $("#incidencias_subestablecimientos").empty();
                });

            //Control selects maquinas>repuestos
            var maquina  = document.getElementById('incidencias_maquinas');
            $("#incidencias_repuestos").empty();
            $("#incidencias_repuestos").prop("disabled", true);
            maquina.addEventListener('change',
                function () {
                    var selectedOption = this.options[maquina.selectedIndex];
                    CambioMaquina(selectedOption.value);
                    $("#incidencias_repuestos").prop("disabled", true);
                    $("#incidencias_repuestos").empty();
                });

            //FIRMA
            var wrapper = document.getElementById("signature-pad");
            var clearButton = wrapper.querySelector("[data-action=clear]");
            var savePNGButton = wrapper.querySelector("[data-action=save-png]");
            var canvas = wrapper.querySelector("canvas");
            var signaturePad = new SignaturePad(canvas, {
                // It's Necessary to use an opaque color when saving image as JPEG;
                // this option can be omitted if only saving as PNG or SVG
                backgroundColor: 'rgb(255, 255, 255)'
            });

            // Adjust canvas coordinate space taking into account pixel ratio,
            // to make it look crisp on mobile devices.
            // This also causes canvas to be cleared.
            function resizeCanvas() {
                // When zoomed out to less than 100%, for some very strange reason,
                // some browsers report devicePixelRatio as less than 1
                // and only part of the canvas is cleared then.
                var ratio =  Math.max(window.devicePixelRatio || 1, 1);

                // This part causes the canvas to be cleared
                canvas.width = canvas.offsetWidth * ratio;
                canvas.height = canvas.offsetHeight * ratio;
                canvas.getContext("2d").scale(ratio, ratio);

                // This library does not listen for canvas changes, so after the canvas is automatically
                // cleared by the browser, SignaturePad#isEmpty might still return false, even though the
                // canvas looks empty, because the internal data of this library wasn't cleared. To make sure
                // that the state of this library is consistent with visual state of the canvas, you
                // have to clear it manually.
                signaturePad.clear();
            }

            // On mobile devices it might make more sense to listen to orientation change,
            // rather than window resize events.
            window.onresize = resizeCanvas;
            resizeCanvas();

            function download(dataURL, filename) {
                var blob = dataURLToBlob(dataURL);
                var url = window.URL.createObjectURL(blob);

                var a = document.createElement("a");
                a.style = "display: none";
                a.href = url;
                a.download = filename;

                document.body.appendChild(a);
                a.click();

                window.URL.revokeObjectURL(url);
            }

            // One could simply use Canvas#toBlob method instead, but it's just to show
            // that it can be done using result of SignaturePad#toDataURL.
            function dataURLToBlob(dataURL) {
                var parts = dataURL.split(';base64,');
                var contentType = parts[0].split(":")[1];
                var raw = window.atob(parts[1]);
                var rawLength = raw.length;
                var uInt8Array = new Uint8Array(rawLength);

                for (var i = 0; i < rawLength; ++i) {
                    uInt8Array[i] = raw.charCodeAt(i);
                }

                return new Blob([uInt8Array], { type: contentType });
            }

            clearButton.addEventListener("click", function (event) {
                signaturePad.clear();
            });

            savePNGButton.addEventListener("click", function (event) {
                if (signaturePad.isEmpty()) {
                    alert("Please provide a signature first.");
                } else {
                    var dataURL = signaturePad.toDataURL();
                    download(dataURL, "signature.png");
                }
            });

        });

        function CambioCliente(idcliente){
            var ruta = '{{ path('obtener_establecimiento', {'idcliente':'IDCLIENTE'}) }}';
            ruta = ruta.replace('IDCLIENTE', idcliente);
            $.post(ruta, null, function(result) {
                $("#incidencias_establecimientos").prop("disabled", false);
                $("#incidencias_establecimientos").append(result);
            });
        }

        function CambioEstablecimiento(idestablecimiento){
            var ruta = '{{ path('obtener_subestablecimiento', {'idestablecimiento':'IDESTABLECIMIENTO'}) }}';
            ruta = ruta.replace('IDESTABLECIMIENTO', idestablecimiento);
            $.post(ruta, null, function(result) {
                $("#incidencias_subestablecimientos").prop("disabled", false);
                $("#incidencias_subestablecimientos").append(result);
            });
        }

        function CambioMaquina(idmaquina){
            var ruta = '{{ path('obtener_repuestos', {'idmaquina':'IDMAQUINA'}) }}';
            ruta = ruta.replace('IDMAQUINA', idmaquina);
            $.post(ruta, null, function(result) {
                $("#incidencias_repuestos").prop("disabled", false);
                $("#incidencias_repuestos").append(result);
            });
        }

        function seleccionIncidencia(idincidencia){
            var ruta = '{{ path('seleccion_incidencia', {'idincidencia':'IDINCIDENCIA'}) }}';
            ruta = ruta.replace('IDINCIDENCIA', idincidencia);
            $.post(ruta, null, function(result) {
                console.log(result);
                $("#incidencias_cliente").val(result['cliente']);
                $("#incidencias_establecimientos").val(result['establecimiento']);
                $("#incidencias_subestablecimientos").val(result['bar']);
                $("#incidencias_establecimientos").prop("disabled", false);
                $("#incidencias_subestablecimientos").prop("disabled", false);
            });
        }

    </script>
{% endblock %}